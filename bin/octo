#!/bin/bash

if [ -f /etc/default/octohost ]; then
        . /etc/default/octohost
fi

get_short_container_id ()
{
  docker ps | grep "$BUILD_ORG_NAME/$1:latest" | cut -d ' ' -f 1
}

get_long_container_id ()
{
  docker inspect $1 | jq '.[0].ID' | cut -d '"' -f 2
}

reformat_bytes ()
{
  (( size = $1/1024/1024 ))
  echo "$size"
}

show_break ()
{
  echo ""
  echo ""
  echo "################################"
}

set_proxy ()
{
  curl -s "$TENTACLES_ADDR/set?domain=$1&endpoint=$ENDPONT_ADDR:$2" > /dev/null
}

get_proxy ()
{
  curl "$TENTACLES_ADDR/get?domain=$1"
}

rm_proxy ()
{
  curl "$TENTACLES_ADDR/del?domain=$1"
}

start_tentacles ()
{
  if [ -e "/var/run/docker.sock" ]; then
    $TENTACLES
  else
    service docker start
    sleep 5
    $TENTACLES
  fi
}

stop_tentacles ()
{
  docker ps | grep "$TENTACLES_IMAGE" | awk '{ print $1 }' | xargs docker kill
}

pull_tentacles ()
{
  docker pull $TENTACLES_IMAGE
}

start_logspout ()
{
  if [ -z "$LOGSPOUT_TARGET" ]; then
    echo "No LOGSPOUT_TARGET in /etc/default/octohost - not starting."
    exit
  fi
  if [ -e "/var/run/docker.sock" ]; then
    $LOGSPOUT
  else
    service docker start
    sleep 5
    $LOGSPOUT
  fi
}

stop_logspout ()
{
  docker ps | grep "$LOGSPOUT_IMAGE" | awk '{ print $1 }' | xargs docker kill
}

pull_logspout ()
{
  docker pull $LOGSPOUT_IMAGE
}

start_logs ()
{
  if [ -z "$REMOTE_SYSLOG_PORT" ]; then
    echo "No REMOTE_SYSLOG_PORT in /etc/default/octohost - not starting."
    exit
  fi
  if [ -e "/var/run/docker.sock" ]; then
    LOG_COMMAND="docker run -d -v=$1:$2 $REMOTE_SYSLOG_COMMAND $2"
    $LOG_COMMAND
  else
    service docker start
    sleep 5
    $LOG_COMMAND
  fi
}

stop_octologs ()
{
  docker ps | grep "$OCTOLOGS_IMAGE" | awk '{ print $1 }' | xargs docker kill
}

check_syslog_port ()
{
  if [ -z "$REMOTE_SYSLOG_PORT" ]; then
    echo "Need to define REMOTE_SYSLOG_PORT in /etc/default/octohost"
    exit 1
  fi
}

case "$1" in

  logs)
  if [ "$2" == "octostart" ]; then
    check_syslog_port
    $OCTOLOGS
  elif [ "$2" == "octostop" ]; then
    stop_octologs
  elif [ "$2" == "start" ]; then
    if [[ $3 && $4 ]]; then
      check_syslog_port
      start_logs "$3" "$4"
    else
      echo "Usage: octo logs start {full-log-path} {mount}"
    fi
  else
    echo "Usage: octo logs {octostart|start [full-log-path] [mount]}"
  fi
  ;;

  logspout)
  if [ "$2" == "start" ]; then
    check_syslog_port
    start_logspout
  elif [ "$2" == "stop" ]; then
    stop_logspout
  elif [ "$2" == "pull" ]; then
    pull_logspout
  else
    echo "Usage: octo logspout {start|stop|pull}"
  fi
  ;;

  tentacles)
    if [ "$2" == "start" ]; then
      start_tentacles
    elif [ "$2" == "stop" ]; then
      stop_tentacles
    elif [ "$2" == "pull" ]; then
      pull_tentacles
    else
      echo "Usage: octo tentacles {start|stop|pull}"
    fi
  ;;

  config:set)
  if [[ $2 && $3 ]]; then
    /usr/local/bin/etcdctl -C $ETCD_SERVER set $2 $3
  else
    echo "Usage: octo config:set {container/key} {var}"
  fi
  ;;

  config:get)
  if [ $2 ]; then
    /usr/local/bin/etcdctl -C $ETCD_SERVER get $2
  else
    echo "Usage: octo config:get {container/key}"
  fi
  ;;

  config:rm)
  if [ $2 ]; then
    /usr/local/bin/etcdctl -C $ETCD_SERVER rm $2
  else
    echo "Usage: octo config:rm {container/key}"
  fi
  ;;

  config)
  if [ $2 ]; then
    for conf in `/usr/local/bin/etcdctl -C $ETCD_SERVER ls $2 | grep -v "Error: 100: Key not found"`;
    do
      echo -n "$conf:";
      /usr/local/bin/etcdctl -C $ETCD_SERVER get $conf
    done
  else
    echo "Usage: octo config {container}"
  fi
  ;;

  proxy:get)
  if [ $2 ]; then
    get_proxy $2
  else
    echo "Usage: octo proxy:get {domain-name}"
  fi
  ;;

  proxy:set)
  if [[ $2 && $3 ]]; then
    set_proxy $2 $3
  else
    echo "Usage: octo proxy:set {domain-name} {port}"
  fi
  ;;

  proxy:rm)
  if [ $2 ]; then
    rm_proxy $2
  else
    echo "Usage: octo proxy:rm {domain-name}"
  fi
  ;;

  proxy)
  echo "Usage: octo proxy:{set|get|rm}"
  ;;

  status)
    cd $SRC_DIR
    for i in *.git; do
      site=`basename $i .git`
      echo -n "$site: "
      # get_container_memory_usage $site
      # echo -n " MB): "
      if (wget -S -t 1 -T 2 --delete-after -qO- http://$site.$DOMAIN_SUFFIX 2>&1 | grep -q "HTTP/1.1 200 OK"); then
        echo -e "\e[32mOK\e[0m"
      else
        echo -e "\e[31mDOWN\e[0m"
      fi
    done
    ;;

  clean)
    echo "Cleaning old exited containers."
    # TODO: Errors if there's no containers - annoying.
    docker ps -a | grep -v "$BUILD_ORG_NAME\/.*\_data*" | grep "Exit" | cut -d ' ' -f 1 | xargs docker rm
    echo "Showing all remaining containers."
    docker ps -a
    echo "Cleaning out all unused images."
    docker images | grep "\<none\>" | awk '{ print $3 }' | xargs docker rmi
    echo "Showing all remaining images."
    docker images
    ;;

  remove)
    if [ $2 ]; then
      if [ -d /home/git/$2.git ]; then
        sudo rm -rf /home/git/$2.git
      else
        echo "There is no source with that name."
        exit
      fi
      if [ -d $SRC_DIR/$2.git ]; then sudo rm -rf $SRC_DIR/$2.git; fi
      echo "Removed the source for $2."
      OLD_ID=$(docker ps | grep "$2:latest" | cut -d ' ' -f 1)
      if [ $OLD_ID ]; then
        docker kill $OLD_ID
        echo "Removed running container."
      fi
      octo proxy:rm $2.$DOMAIN_SUFFIX
    else
      echo "Usage: octo remove {container}"
    fi
    ;;

  move)
    if [ $2 ]; then
      if [ "$2" == 'sites' ]; then
        if [ $3 ]; then
          # Grab all of the sites.
          sudo /usr/bin/rsync -avz ubuntu@$3:/home/git/*.git /home/git/
          cd /home/git
          for i in *.git; do
            site=`basename $i .git`
            /usr/bin/octo restart $site
            # Need a checkout and not a bare repo to build with later.
            sudo git clone /home/git/$site.git $SRC_DIR/$site.git
          done
          sudo chown -R git.git $SRC_DIR
        else
          echo "Need a source."
        fi
      fi
    else
      echo "Usage: octo move sites {ip-address}'"
    fi
    ;;

  restart)
    if [ $2 ]; then
      show_break
      echo "Restarting $2."
      newrev=`cd /home/git/$2.git; git log . | head -1 | cut -d ' ' -f 2`
      branch=`cd /home/git/$2.git; git branch | grep "*" | cut -d ' ' -f 2`
      cd /home/git/$2.git; sudo git archive $newrev | /home/git/receiver "$2" "$newrev" "git" "NOTHING HERE" "$branch"
      sudo rm -rf $SRC_DIR/$2
    else
      echo "Usage: octo restart {container}"
    fi
    ;;

  update)
    echo "Updating your /usr/bin/octo from $OCTO_BIN"
    cd /usr/bin/ && rm -f octo && wget -q $OCTO_BIN && chmod 755 octo
  ;;

  help)
  echo "Usage: octo status|clean|restart|remove|move|config|tentacles|logspout|logs|proxy|update"
  cat<<EOF

  octo status                              Show basic app status: OK or DOWN.
  octo clean                               Remove unused and stopped containers.
  octo restart {container}                 Restart {container} from src stored in $SRC_DIR.
  octo remove {container}                  Remove {container}, the src and the proxy entry.
  octo move sites {ip-address}             Move sites from targeted octohost, rebuilding all containers from src.

  octo config {container}                  Show all ENV variables for {container}.
  octo config:set {container/key} {var}    Set an ENV variable for {container}.
  octo config:get {container/key}          Get an ENV variable for {container}.
  octo config:rm {container/key}           Remove an ENV variable for {container}.

  octo tentacles {pull|start|stop}         Pull/start/stop octohost/tentacles image.

  octo logspout {pull|start|stop}          Pull/start/stop progrium/logspout image.

  octo logs octostart                      Use remote_syslog to send Docker and nginx logs to remote syslog.
  octo logs octostop                       Stop sending Docker and nginx logs to remote syslog.
  octo logs start {full-log-path} {mount}  Use remote_syslog to send {full-log-path} to remote syslog.

  octo proxy:set {domain-name} {port}      Set {domain-name} and {port} in tentacles.
  octo proxy:get {domain-name}             Get {port} for {domain-name} from tentacles.
  octo proxy:rm {domain-name}              Remove record for {domain-name} in tentacles.

  octo update                              Update octo command from $OCTO_BIN.
EOF
  for script in $(ls -d /usr/local/octohost/plugins/*/commands); do
    $script "$@"
  done
  ;;

  *)
  for script in $(ls -d /usr/local/octohost/plugins/*/commands); do
    $script "$@"
  done
  ;;
esac

#!/bin/bash

# Directories and domain names.
SRC_DIR="/home/git/src/"
PUBLIC_IP=$(curl -s http://ipv4.icanhazip.com)
PRIVATE_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)
DOMAIN_SUFFIX="$PUBLIC_IP.xip.io"
ETCD_SERVER="0.0.0.0:4001"
BUILD_ORG_NAME="octoprod"
TENTACLES_PORT="82"
TENTACLES_ADDR="http://127.0.0.1:$TENTACLES_PORT"
TENTACLES_BUILD="octohost/tentacles"
ENDPONT_ADDR="127.0.0.1"
TENTACLES="docker run -d -e REDIS_URL=redis://$PRIVATE_IP:6379 -p $TENTACLES_PORT:5000 $TENTACLES_BUILD"

get_short_container_id ()
{
  docker ps | grep "$BUILD_ORG_NAME/$1:latest" | cut -d ' ' -f 1
}

get_long_container_id ()
{
  docker inspect $1 | jq '.[0].ID' | cut -d '"' -f 2
}

get_memory_usage ()
{
  cat /sys/fs/cgroup/memory/lxc/$1/memory.usage_in_bytes
}

reformat_bytes ()
{
  (( size = $1/1024/1024 ))
  echo "$size"
}

get_container_memory_usage ()
{
  ID=$(get_short_container_id $1)
  LONG=$(get_long_container_id $ID)
  MEMORY=$(get_memory_usage $LONG)
  MB=$(reformat_bytes $MEMORY)
  echo -n $MB
}

show_break ()
{
  echo ""
  echo ""
  echo "################################"
}

set_proxy ()
{
  curl -s "$TENTACLES_ADDR/set?domain=$1&endpoint=$ENDPONT_ADDR:$2" > /dev/null
}

get_proxy ()
{
  curl "$TENTACLES_ADDR/get?domain=$1"
}

rm_proxy ()
{
  curl "$TENTACLES_ADDR/del?domain=$1"
}

start_tentacles ()
{
  if [ -e "/var/run/docker.sock" ]; then
    $TENTACLES
  else
    service docker start
    sleep 5
    $TENTACLES
  fi
}

stop_tentacles ()
{
  docker ps | grep "$TENTACLES_BUILD" | awk '{ print $1 }' | xargs docker kill
}

pull_tentacles ()
{
  docker pull $TENTACLES_BUILD
}

case "$1" in

  tentacles)
    if [ "$2" == "start" ]; then
      start_tentacles
    elif [ "$2" == "stop" ]; then
      stop_tentacles
    elif [ "$2" == "pull" ]; then
      pull_tentacles
    else
      echo "Need a start|stop|pull command."
    fi
  ;;

  config:set)
  if [[ $2 && $3 ]]; then
    /usr/local/bin/etcdctl -C $ETCD_SERVER set $2 "$3"
  else
    echo "Need KEY VAR"
  fi
  ;;

  config:get)
  if [ $2 ]; then
    /usr/local/bin/etcdctl -C $ETCD_SERVER get $2
  else
    echo "Need KEY"
  fi
  ;;

  config:rm)
  if [ $2 ]; then
    /usr/local/bin/etcdctl -C $ETCD_SERVER rm $2
  else
    echo "Need KEY"
  fi
  ;;

  config)
  if [ $2 ]; then
    for conf in `/usr/local/bin/etcdctl -C $ETCD_SERVER ls $2 | grep -v "Error: 100: Key not found"`;
    do
      echo -n "$conf:";
      /usr/local/bin/etcdctl -C $ETCD_SERVER get $conf
    done
  else
    echo "Need the name of a container."
  fi
  ;;

  proxy:get)
  if [ $2 ]; then
    get_proxy $2
  else
    echo "Need the name of a website"
  fi
  ;;

  proxy:set)
  if [[ $2 && $3 ]]; then
    set_proxy $2 $3
  else
    echo "Need a domain name and a port."
  fi
  ;;

  proxy:rm)
  if [ $2 ]; then
    rm_proxy $2
  else
    echo "Need the name of a website"
  fi
  ;;

  status)
    cd $SRC_DIR
    for i in *.git; do
      site=`basename $i .git`
      echo -n "$site: "
      # get_container_memory_usage $site
      # echo -n " MB): "
      if (wget -S -t 1 -T 2 --delete-after -qO- http://$site.$DOMAIN_SUFFIX 2>&1 | grep -q "HTTP/1.1 200 OK"); then
        echo -e "\e[32mOK\e[0m"
      else
        echo -e "\e[31mDOWN\e[0m"
      fi
    done
    ;;

  clean)
    echo "Cleaning old exited containers."
    # TODO: Errors if there's no containers - annoying.
    docker ps -a | grep -v "$BUILD_ORG_NAME\/.*\_data*" | grep "Exit" | cut -d ' ' -f 1 | xargs docker rm
    echo "Showing all remaining containers."
    docker ps -a
    echo "Cleaning out all unused images."
    docker images | grep "\<none\>" | awk '{ print $3 }' | xargs docker rmi
    echo "Showing all remaining images."
    docker images
    ;;

  remove)
    if [ $2 ]; then
      if [ -d /home/git/$2.git ]; then
        sudo rm -rf /home/git/$2.git
      else
        echo "There is no source with that name."
        exit
      fi
      if [ -d /home/git/src/$2.git ]; then sudo rm -rf /home/git/src/$2.git; fi
      echo "Removed the source for $2."
      OLD_ID=$(docker ps | grep "$2:latest" | cut -d ' ' -f 1)
      if [ $OLD_ID ]; then
        docker kill $OLD_ID
        echo "Removed running container."
      fi
      octo proxy:rm $2.$DOMAIN_SUFFIX
    else
      echo "Need the name to remove."
    fi
    ;;

  move)
    if [ $2 ]; then
      if [ "$2" == 'sites' ]; then
        if [ $3 ]; then
          # Grab all of the sites.
          sudo /usr/bin/rsync -avz ubuntu@$3:/home/git/*.git /home/git/
          cd /home/git
          for i in *.git; do
            site=`basename $i .git`
            /usr/bin/octo restart $site
            # Need a checkout and not a bare repo to build with later.
            sudo git clone /home/git/$site.git /home/git/src/$site.git
          done
          sudo chown -R git.git /home/git/src
        else
          echo "Need a source."
        fi
      fi
    else
      echo "Please enter '/usr/bin/octo move sites source.ip.address'"
    fi
    ;;

  restart)
    if [ $2 ]; then
      show_break
      echo "Restarting $2."
      newrev=`cd /home/git/$2.git; git log . | head -1 | cut -d ' ' -f 2`
      branch=`cd /home/git/$2.git; git branch | grep "*" | cut -d ' ' -f 2`
      cd /home/git/$2.git; sudo git archive $newrev | /home/git/receiver "$2" "$newrev" "git" "NOTHING HERE" "$branch"
      sudo rm -rf /home/git/src/$2
    else
      echo "Need a site to restart."
    fi
    ;;

  *)
    echo "Usage: octo status|clean|restart|remove|move|config"
    ;;
esac
